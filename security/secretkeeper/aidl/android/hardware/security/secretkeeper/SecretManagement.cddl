; CDDL for the Secret Management API.
; Also see processSecretManagementRequest method in ISecretkeeper.aidl

; ProtectedRequestPacket is used by client for accessing Secret Management API
; in Secretkeeper service. The service returns ProtectedResponsePacket of the corresponding type.

; ProtectedRequestPacket & ProtectedResponsePacket are encrypted wrappers
; on RequestPacket & ResponsePacket using symmetric keys agreed between Secretkeeper & clients
; (these are referred to as KeySourceToSink & KeySinkToSource)
;
; The API operation required is encoded using 'Opcode', the arguments using 'Params'
; and returned values as 'Result'.

ProtectedRequestPacket =
        ProtectedGetVersionRequest / ProtectedStoreSecretRequest / ProtectedGetSecretRequest
ProtectedResponsePacket =
        ProtectedGetVersionResponse / ProtectedStoreSecretResponse / ProtectedGetSecretResponse

ProtectedGetVersionRequest = ProtectedRequestPacket<GetVersionRequestPacket>
ProtectedGetVersionResponse = ProtectedResponsePacket<GetVersionResponsePacket>
ProtectedStoreSecretRequest = ProtectedRequestPacket<StoreSecretRequestPacket>
ProtectedStoreSecretResponse = ProtectedResponsePacket<StoreSecretResponsePacket>
ProtectedGetSecretRequest = ProtectedRequestPacket<GetSecretRequestPacket>
ProtectedGetSecretResponse = ProtectedResponsePacket<GetSecretResponsePacket>

GetVersionRequestPacket = RequestPacket<GetVersionOpcode, GetVersionParams>
GetVersionResponsePacket = ResponsePacket<GetVersionResult>
StoreSecretRequestPacket = RequestPacket<StoreSecretOpcode, StoreSecretParams>
StoreSecretResponsePacket = ResponsePacket<StoreSecretResult>
GetSecretRequestPacket = RequestPacket<GetOpcode, GetSecretParams>
GetSecretResponsePacket = ResponsePacket<GetSecretResult>

RequestPacket<Opcode, Params> = [
    Opcode,
    Params
]
ResponsePacket<Result> = ResponsePacketError / ResponsePacketSuccess<Result>

ResponsePacketSuccess = [
    0,                          ; Indicates successful Response
    result : Result
]
ResponsePacketError = [
    error_code: ErrorCode,      ; Indicate the error
    error_message: tstr         ; Additional human-readable context
]

Opcode = &(
    GetVersionOpcode: 1,     ; Get version of the SecretManagement API
    StoreSecretOpcode: 2,          ; Store a secret
    GetSecretOpcode: 3,            ; Get the secret
)

GetVersionParams = ()
GetVersionResult = (version : uint)

StoreSecretParams = (
    id : bstr .size 64              ; Unique identifier of the secret
    secret : bstr .size 32,
    sealing_policy : bstr .cbor DicePolicy,    ; See DicePolicy.cddl for definition of DicePolicy
)
StoreSecretResult = ()

GetSecretParams = (
    id : bstr .size 64              ; Unique identifier of the secret
    ; Use this to update the sealing policy associated with a secret during GetSecret operation.
    updated_sealing_policy : bstr .cbor DicePolicy / nil,
)
GetSecretResult = (secret : bstr .size 32)


ProtectedRequestPacket<Payload, Key> = CryptoPayload<Payload, KeySourceToSink>
ProtectedResponsePacket<Payload, Key> = ProtectedResponseError
                                    / ProtectedResponseSuccess<Payload>

ProtectedResponseSuccess<Payload> = [
    0,                                ; Indicates successful crypto operations. Note: Payload
                                                    ; may contain Error from functional layer.
    message: CryptoPayload<Payload, KeySinkToSource>         ; message is the encrypted payload
]

ProtectedResponseError = [
    error_code: CryptoErrorCode,           ; Indicates the error. This is in cleartext & will be
                                           ; visible to Android. These are errors from crypto
                                           ; layer & indicates the request could not even be read
    message: tstr                          ; Additional human-readable context
]

CryptoPayload<Payload, Key> = [         ; COSE_Encrypt0 (untagged), [RFC 9052 s5.2]
    protected: bstr .cbor {
        1 : 3,                  ; Algorithm: AES-GCM mode w/ 256-bit key, 128-bit tag
        4 : bstr                ; key identifier, uniquely identifies the session
                                ; TODO(b/291228560): Refer to the Key Exchange spec.
    },
    unprotected: {
        5 : bstr .size 12          ; IV
    },
    ciphertext : bstr     ; AES-GCM-256(Key, bstr .cbor Payload)
                          ; AAD for the encryption is CBOR-serialized
                          ; Enc_structure (RFC 9052 s5.3) with empty external_aad.
]

; TODO(b/291224769): Create a more exhaustive set of CryptoErrorCode
CryptoErrorCode = &(
    CryptoErrorCode_SessionExpired: 1,
)

; TODO(b/291224769): Create a more exhaustive set of ErrorCodes
ErrorCode = &(
    ; Use this as if no other error code can be used.
    ErrorCode_UnexpectedServerError: 1,
    ; Indicate the Request was malformed & hence couldnt be served.
    ErrorCode_RequestMalformed: 2,
)

; INCLUDE DicePolicy.cddl for: DicePolicy